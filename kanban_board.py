from PyQt5.QtWidgets import (QWidget, QHBoxLayout, QVBoxLayout, QLabel, 
                            QScrollArea, QFrame, QPushButton, QSizePolicy, 
                            QMenu, QDialog, QLineEdit, QTextEdit, QDateTimeEdit, 
                            QSpinBox, QMessageBox, QComboBox,QMainWindow)
from PyQt5.QtCore import Qt, QDateTime, QMimeData
from datetime import datetime
from Task import Task
from PyQt5.QtGui import QDrag

class KanbanCard(QFrame):
    def __init__(self, task, parent=None):
        super().__init__(parent)
        self.task = task
        self.init_ui()
        self.setAcceptDrops(True)
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        layout = QVBoxLayout()
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        top_panel = QHBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = QLabel(self.task.title)
        self.title_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        top_panel.addWidget(self.title_label)
        
        # –†–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
        top_panel.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        history_btn = QPushButton("üìã")
        history_btn.setFixedSize(24, 24)
        history_btn.setStyleSheet("""
            QPushButton {
                border: none;
                border-radius: 12px;
                background-color: transparent;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
        """)
        history_btn.clicked.connect(self.show_history)
        top_panel.addWidget(history_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        comments_btn = QPushButton("üí¨")
        comments_btn.setFixedSize(24, 24)
        comments_btn.setStyleSheet("""
            QPushButton {
                border: none;
                border-radius: 12px;
                background-color: transparent;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
        """)
        comments_btn.clicked.connect(self.show_comments)
        top_panel.addWidget(comments_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_btn = QPushButton("‚úé")
        edit_btn.setFixedSize(24, 24)
        edit_btn.setStyleSheet("""
            QPushButton {
                border: none;
                border-radius: 12px;
                background-color: transparent;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #e0e0e0;
            }
        """)
        edit_btn.clicked.connect(self.edit_task)
        top_panel.addWidget(edit_btn)
        
        layout.addLayout(top_panel)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        self.description_label = QLabel(self.task.description[:100] + '...' if len(self.task.description) > 100 else self.task.description)
        self.description_label.setWordWrap(True)
        layout.addWidget(self.description_label)
        
        # –î–µ–¥–ª–∞–π–Ω
        if self.task.deadline:
            self.deadline_label = QLabel(f"–î–µ–¥–ª–∞–π–Ω: {self.task.deadline.strftime('%d.%m.%Y')}")
            layout.addWidget(self.deadline_label)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority_text = {1: "–ù–∏–∑–∫–∏–π", 2: "–°—Ä–µ–¥–Ω–∏–π", 3: "–í—ã—Å–æ–∫–∏–π"}.get(self.task.priority, "–ù–µ —É–∫–∞–∑–∞–Ω")
        self.priority_label = QLabel(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}")
        layout.addWidget(self.priority_label)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –∫–æ–º–∞–Ω–¥–µ
        project_name = self.get_project_name()
        team_name = self.get_team_name()
        
        if project_name:
            self.project_label = QLabel(f"–ü—Ä–æ–µ–∫—Ç: {project_name}")
            layout.addWidget(self.project_label)
        
        if team_name:
            self.team_label = QLabel(f"–ö–æ–º–∞–Ω–¥–∞: {team_name}")
            layout.addWidget(self.team_label)
        
        self.setLayout(layout)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_colors = {
            1: "#E8F5E9",  # —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ
            2: "#FFF3E0",  # —Å–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
            3: "#FFEBEE"   # —Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ
        }
        self.setStyleSheet(f"""
            QFrame {{
                background-color: {priority_colors.get(self.task.priority, "#FFFFFF")};
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 8px;
                margin: 4px;
            }}
        """)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self.setAcceptDrops(True)
        
    def toggle_status(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            current_status = self.task.status
            new_status = None
            
            if current_status == 0:
                new_status = 2  # –ù–æ–≤–∞—è -> –í—ã–ø–æ–ª–Ω–µ–Ω–æ
            elif current_status == 1:
                new_status = 2  # –í —Ä–∞–±–æ—Ç–µ -> –ó–∞–≤–µ—Ä—à–µ–Ω–æ
            elif current_status == 2:
                new_status = 0  # –ó–∞–≤–µ—Ä—à–µ–Ω–æ -> –ù–æ–≤–∞—è
            
            print(f"[DEBUG] –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {self.task.task_id}: {current_status} -> {new_status}")
            
            from database import Database
            db = Database()
            if db.update_task_status(self.task.task_id, new_status):
                self.task.status = new_status  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ–±—ä–µ–∫—Ç–µ –∑–∞–¥–∞—á–∏
                
                # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
                main_window = None
                current = self
                while current and not isinstance(current, QMainWindow):
                    current = current.parent()
                    if current and hasattr(current, 'func'):
                        main_window = current
                        break
                
                
                if main_window:
                    print("[DEBUG] –ù–∞–π–¥–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É")
                    main_window.func.click_input_button()
                else:
                    print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")
                    
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            import traceback
            traceback.print_exc()
    
    def edit_task(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            main_window = None
            parent = self.parent()
            while parent:
                if isinstance(parent, QMainWindow):
                    main_window = parent
                    break
                parent = parent.parent()
            
            if not main_window or not hasattr(main_window, 'func'):
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º")
                return

            dialog = QDialog(self)
            dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É")
            layout = QVBoxLayout()

            # –ù–∞–∑–≤–∞–Ω–∏–µ
            title_label = QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:")
            title_edit = QLineEdit(self.task.title)
            layout.addWidget(title_label)
            layout.addWidget(title_edit)

            # –û–ø–∏—Å–∞–Ω–∏–µ
            description_label = QLabel("–û–ø–∏—Å–∞–Ω–∏–µ:")
            description_edit = QTextEdit()
            description_edit.setText(self.task.description)
            layout.addWidget(description_label)
            layout.addWidget(description_edit)

            # –î–µ–¥–ª–∞–π–Ω
            deadline_label = QLabel("–î–µ–¥–ª–∞–π–Ω:")
            deadline_edit = QDateTimeEdit()
            deadline_edit.setDateTime(self.task.deadline if self.task.deadline else QDateTime.currentDateTime())
            deadline_edit.setCalendarPopup(True)
            layout.addWidget(deadline_label)
            layout.addWidget(deadline_edit)

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            priority_label = QLabel("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:")
            priority_edit = QSpinBox()
            priority_edit.setMinimum(1)
            priority_edit.setMaximum(3)
            priority_edit.setValue(self.task.priority if self.task.priority else 1)
            layout.addWidget(priority_label)
            layout.addWidget(priority_edit)

            # –ö–Ω–æ–ø–∫–∏
            buttons = QHBoxLayout()
            save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
            buttons.addWidget(save_button)
            buttons.addWidget(cancel_button)
            layout.addLayout(buttons)

            dialog.setLayout(layout)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            save_button.clicked.connect(dialog.accept)
            cancel_button.clicked.connect(dialog.reject)

            if dialog.exec_() == QDialog.Accepted:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
                if main_window.func.db.update_task(
                    task_id=self.task.task_id,
                    title=title_edit.text(),
                    description=description_edit.toPlainText(),
                    deadline=deadline_edit.dateTime().toPyDateTime(),
                    priority=priority_edit.value(),
                    user_id=self.task.user_id,
                    team_id=self.task.team_id
                ):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
                    self.task.title = title_edit.text()
                    self.task.description = description_edit.toPlainText()
                    self.task.deadline = deadline_edit.dateTime().toPyDateTime()
                    self.task.priority = priority_edit.value()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self.update_display()
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
    
    def delete_task(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            reply = QMessageBox.question(
                self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?',
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.Yes:
                from database import Database
                db = Database()
                if db.delete_task(self.task.task_id):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
                    from design import Window
                    main_window = self.window()
                    if isinstance(main_window, Window):
                        main_window.click_input_button()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
    
    def get_priority_color(self):
        colors = {
            1: "#2ecc71",  # –ó–µ–ª–µ–Ω—ã–π
            2: "#3498db",  # –°–∏–Ω–∏–π
            3: "#f1c40f",  # –ñ–µ–ª—Ç—ã–π
            4: "#e67e22",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            5: "#e74c3c"   # –ö—Ä–∞—Å–Ω—ã–π
        }
        return colors.get(self.task.priority, "#95a5a6")
    
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            drag = QDrag(self)
            mime = QMimeData()
            mime.setText(str(self.task.task_id))
            drag.setMimeData(mime)
            drag.exec_(Qt.MoveAction)
    
    def show_history(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏"""
        try:
            main_window = self.get_main_window()
            if not main_window or not hasattr(main_window, 'func'):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º")
                return
            
            dialog = QDialog(self)
            dialog.setWindowTitle(f"–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏: {self.task.title}")
            dialog.resize(600, 400)
            layout = QVBoxLayout()

            # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            history_area = QTextEdit()
            history_area.setReadOnly(True)
            layout.addWidget(history_area)

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = main_window.func.db.get_task_history(self.task.task_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
            html_content = "<style>"
            html_content += "p { margin: 5px 0; }"
            html_content += ".username { color: #4CAF50; font-weight: bold; }"
            html_content += ".timestamp { color: #666; font-size: 0.9em; }"
            html_content += ".change { margin: 10px 0; padding: 10px; background-color: #f8f9fa; }"
            html_content += "</style>"
            
            for record in history:
                history_id, timestamp, username, old_status, new_status, old_priority, new_priority, \
                old_deadline, new_deadline, old_description, new_description, change_type = record
                
                html_content += f'<div class="change">'
                html_content += f'<span class="username">{username}</span> '
                html_content += f'<span class="timestamp">{timestamp.strftime("%d.%m.%Y %H:%M")}</span>'
                
                # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if change_type == 'update_title':
                    html_content += f'<p>–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:<br>'
                    html_content += f'–ë—ã–ª–æ: {old_description}<br>'
                    html_content += f'–°—Ç–∞–ª–æ: {new_description}</p>'
                elif change_type == 'update_description':
                    html_content += f'<p>–ò–∑–º–µ–Ω–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:<br>'
                    html_content += f'–ë—ã–ª–æ: {old_description}<br>'
                    html_content += f'–°—Ç–∞–ª–æ: {new_description}</p>'
                elif change_type == 'update_status':
                    status_text = {True: "–ó–∞–≤–µ—Ä—à–µ–Ω–∞", False: "–í —Ä–∞–±–æ—Ç–µ"}
                    html_content += f'<p>–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:<br>'
                    html_content += f'–ë—ã–ª–æ: {status_text.get(old_status, "–ù–µ —É–∫–∞–∑–∞–Ω")}<br>'
                    html_content += f'–°—Ç–∞–ª–æ: {status_text.get(new_status, "–ù–µ —É–∫–∞–∑–∞–Ω")}</p>'
                elif change_type == 'update_priority':
                    priority_text = {1: "–ù–∏–∑–∫–∏–π", 2: "–°—Ä–µ–¥–Ω–∏–π", 3: "–í—ã—Å–æ–∫–∏–π"}
                    html_content += f'<p>–ò–∑–º–µ–Ω–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:<br>'
                    html_content += f'–ë—ã–ª–æ: {priority_text.get(old_priority, "–ù–µ —É–∫–∞–∑–∞–Ω")}<br>'
                    html_content += f'–°—Ç–∞–ª–æ: {priority_text.get(new_priority, "–ù–µ —É–∫–∞–∑–∞–Ω")}</p>'
                elif change_type == 'update_deadline':
                    old_date = old_deadline.strftime("%d.%m.%Y") if old_deadline else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    new_date = new_deadline.strftime("%d.%m.%Y") if new_deadline else "–ù–µ —É–∫–∞–∑–∞–Ω"
                    html_content += f'<p>–ò–∑–º–µ–Ω–µ–Ω –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏:<br>'
                    html_content += f'–ë—ã–ª–æ: {old_date}<br>'
                    html_content += f'–°—Ç–∞–ª–æ: {new_date}</p>'
                elif change_type == 'add_comment':
                    html_content += f'<p>–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:<br>{new_description}</p>'
                elif change_type == 'create_task':
                    html_content += f'<p>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞</p>'
                elif change_type == 'delete_task':
                    html_content += f'<p>–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞</p>'
                
                html_content += '</div>'
                
            history_area.setHtml(html_content)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_btn.clicked.connect(dialog.accept)
            layout.addWidget(close_btn)

            dialog.setLayout(layout)
            dialog.exec_()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

    def show_comments(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ"""
        try:
            main_window = self.get_main_window()
            if not main_window or not hasattr(main_window, 'func'):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º")
                return

            dialog = QDialog(self)
            dialog.setWindowTitle(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ: {self.task.title}")
            dialog.resize(400, 500)
            layout = QVBoxLayout()

            # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            comments_area = QTextEdit()
            comments_area.setReadOnly(True)
            layout.addWidget(comments_area)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            comments = main_window.func.db.get_task_comments(self.task.task_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            html_content = "<style>"
            html_content += "p { margin: 5px 0; }"
            html_content += ".username { color: #4CAF50; font-weight: bold; }"
            html_content += ".timestamp { color: #666; font-size: 0.9em; }"
            html_content += ".comment { margin: 10px 0; padding: 5px; background-color: #f8f9fa; }"
            html_content += "</style>"
            
            for comment in comments:
                comment_id, text, created_at, username, user_id = comment
                html_content += f'<div class="comment">'
                html_content += f'<span class="username">{username}</span> '
                html_content += f'<span class="timestamp">{created_at.strftime("%d.%m.%Y %H:%M")}</span>'
                html_content += f'<p>{text}</p>'
                html_content += '</div>'
                
            comments_area.setHtml(html_content)

            # –ü–æ–ª–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            new_comment = QTextEdit()
            new_comment.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
            new_comment.setMaximumHeight(100)
            layout.addWidget(new_comment)

            # –ö–Ω–æ–ø–∫–∏
            buttons = QHBoxLayout()
            add_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º main_window.func –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            add_btn.clicked.connect(lambda: self.add_comment(new_comment.toPlainText(), dialog, main_window.func))
            close_btn.clicked.connect(dialog.accept)
            
            buttons.addWidget(add_btn)
            buttons.addWidget(close_btn)
            layout.addLayout(buttons)

            dialog.setLayout(layout)
            dialog.exec_()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}")

    def add_comment(self, comment_text: str, dialog: QDialog, func):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        if not comment_text.strip():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        try:
            if func.db.add_comment_to_task(
                self.task.task_id,
                func.current_user['user_id'],
                comment_text
            ):
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")
                dialog.accept()
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}")

    def update_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            self.title_label.setText(self.task.title)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            if hasattr(self, 'description_label'):
                self.description_label.setText(self.task.description[:100] + '...' if len(self.task.description) > 100 else self.task.description)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω
            if hasattr(self, 'deadline_label') and self.task.deadline:
                self.deadline_label.setText(f"–î–µ–¥–ª–∞–π–Ω: {self.task.deadline.strftime('%d.%m.%Y')}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if hasattr(self, 'priority_label'):
                priority_text = {1: "–ù–∏–∑–∫–∏–π", 2: "–°—Ä–µ–¥–Ω–∏–π", 3: "–í—ã—Å–æ–∫–∏–π"}.get(self.task.priority, "–ù–µ —É–∫–∞–∑–∞–Ω")
                self.priority_label.setText(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_text}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            priority_colors = {
                1: "#E8F5E9",  # —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ
                2: "#FFF3E0",  # —Å–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
                3: "#FFEBEE"   # —Å–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ
            }
            self.setStyleSheet(f"""
                QFrame {{
                    background-color: {priority_colors.get(self.task.priority, "#FFFFFF")};
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    padding: 8px;
                    margin: 4px;
                }}
            """)
            
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç
            self.update()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    def get_project_name(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            main_window = self.get_main_window()
            if main_window and hasattr(main_window, 'func'):
                cursor = main_window.func.db.connection.cursor()
                cursor.execute("""
                    SELECT p.name 
                    FROM project p
                    JOIN tasks t ON t.project_id = p.project_id
                    WHERE t.task_id = %s
                """, (self.task.task_id,))
                result = cursor.fetchone()
                return result[0] if result else "–ù–µ —É–∫–∞–∑–∞–Ω"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return "–ù–µ —É–∫–∞–∑–∞–Ω"

    def get_team_name(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        try:
            main_window = self.get_main_window()
            if main_window and hasattr(main_window, 'func'):
                cursor = main_window.func.db.connection.cursor()
                cursor.execute("""
                    SELECT name FROM team WHERE team_id = %s
                """, (self.task.team_id,))
                result = cursor.fetchone()
                return result[0] if result else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    def get_main_window(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        parent = self.parent()
        while parent:
            if isinstance(parent, QMainWindow):
                return parent
            parent = parent.parent()
        return None

class KanbanColumn(QWidget):
    def __init__(self, title, status):
        super().__init__()
        self.status = status
        self.color = {
            "new": "light-blue",
            "backlog": "light-yellow",
            "completed": "light-green"
        }.get(status, "white")
        self.init_ui(title)
        
    def init_ui(self, title):
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        title_label = QLabel(title)
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet(f"""
            QLabel {{
                background: {self.get_background_color()};
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
            }}
        """)
        layout.addWidget(title_label)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        self.cards_layout = QVBoxLayout()
        self.cards_layout.setAlignment(Qt.AlignTop)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        cards_container = QWidget()
        cards_container.setLayout(self.cards_layout)
        scroll.setWidget(cards_container)
        
        layout.addWidget(scroll)
        self.setLayout(layout)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self.setAcceptDrops(True)
        
    def get_background_color(self):
        colors = {
            "light-blue": "#e3f2fd",
            "light-yellow": "#fff3e0",
            "light-green": "#e8f5e9",
            "white": "#ffffff"
        }
        return colors.get(self.color, "#ffffff")
    
    def add_card(self, task):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫—É"""
        card = KanbanCard(task, self)
        self.cards_layout.addWidget(card)
        print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏ {task.task_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {task.status} –≤ –∫–æ–ª–æ–Ω–∫—É {self.status}")
    
    def dragEnterEvent(self, event):
        if event.mimeData().hasText():
            event.accept()
        else:
            event.ignore()
            
    def dropEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            data = event.mimeData().text()
            task_id = int(data)
            
            from database import Database
            db = Database()
            
            # –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            new_status = {
                "new": 0,      # –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (—Å—Ç–∞—Ç—É—Å 0)
                "backlog": 1,  # –í —Ä–∞–±–æ—Ç–µ (—Å—Ç–∞—Ç—É—Å 1)
                "completed": 2 # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ (—Å—Ç–∞—Ç—É—Å 2)
            }[self.status]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if db.update_task_status(task_id, new_status):
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
                tasks = db.get_all_tasks()
                self.parent().update_tasks(tasks)
                event.accept()
            else:
                event.ignore()
                
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            event.ignore()

class KanbanBoard(QWidget):
    def __init__(self, project_id=None):
        super().__init__()
        self.project_id = project_id
        self.init_ui()
        
    def init_ui(self):
        layout = QHBoxLayout()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        self.new = KanbanColumn("–ù–æ–≤—ã–µ", "new")
        self.backlog = KanbanColumn("–í —Ä–∞–±–æ—Ç–µ", "backlog")
        self.completed = KanbanColumn("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", "completed")
        
        layout.addWidget(self.new)
        layout.addWidget(self.backlog)
        layout.addWidget(self.completed)
        
        self.setLayout(layout)
        
    def update_tasks(self, tasks):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –¥–æ—Å–∫–µ"""
        print("[DEBUG] –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ –¥–æ—Å–∫–µ")
        
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
            for column in [self.new, self.backlog, self.completed]:
                while column.cards_layout.count():
                    item = column.cards_layout.takeAt(0)
                    widget = item.widget()
                    if widget:
                        widget.deleteLater()
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
            for task in tasks:
                status = task.status  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–î
                print(f"[DEBUG] –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task.task_id}, —Å—Ç–∞—Ç—É—Å: {status}")
                
                if status == 0:
                    print(f"[DEBUG] –ó–∞–¥–∞—á–∞ {task.task_id} -> –ù–æ–≤—ã–µ")
                    self.new.add_card(task)
                elif status == 1:
                    print(f"[DEBUG] –ó–∞–¥–∞—á–∞ {task.task_id} -> –í —Ä–∞–±–æ—Ç–µ")
                    self.backlog.add_card(task)
                
                elif status == 2:
                    print(f"[DEBUG] –ó–∞–¥–∞—á–∞ {task.task_id} -> –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ")
                    self.completed.add_card(task)
                else:
                    print(f"[WARNING] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å {status}, –∑–∞–¥–∞—á–∞ {task.task_id} -> –ù–æ–≤—ã–µ")
                    self.new.add_card(task)
                    
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏: {e}")
            import traceback
            traceback.print_exc()

    def add_task(self, task, status="new"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É"""
        if status == "backlog":
            task.current_column = 'backlog'
            self.backlog.add_card(task)
        elif status == "completed":
            task.current_column = 'completed'
            self.completed.add_card(task)
        else:
            task.current_column = 'new'
            self.new.add_card(task)

    def show_create_task_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            dialog = QDialog(self)
            dialog.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
            layout = QVBoxLayout(dialog)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            title_edit = QLineEdit()
            layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:"))
            layout.addWidget(title_edit)
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_edit = QTextEdit()
            layout.addWidget(QLabel("–û–ø–∏—Å–∞–Ω–∏–µ:"))
            layout.addWidget(desc_edit)
            
            # –ö–æ–º–∞–Ω–¥–∞
            team_combo = QComboBox()
            team_combo.addItem("–ë–µ–∑ –∫–æ–º–∞–Ω–¥—ã", None)
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from database import Database
            db = Database()
            teams = db.get_user_teams(self.parent().func.current_user['user_id'])
            for team in teams:
                team_combo.addItem(team['name'], team['team_id'])
            layout.addWidget(QLabel("–ö–æ–º–∞–Ω–¥–∞:"))
            layout.addWidget(team_combo)
            
            # –î–µ–¥–ª–∞–π–Ω
            deadline_edit = QDateTimeEdit(QDateTime.currentDateTime())
            deadline_edit.setCalendarPopup(True)
            layout.addWidget(QLabel("–î–µ–¥–ª–∞–π–Ω:"))
            layout.addWidget(deadline_edit)
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            priority_edit = QSpinBox()
            priority_edit.setRange(1, 5)
            priority_edit.setValue(3)
            layout.addWidget(QLabel("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-5):"))
            layout.addWidget(priority_edit)
            
            # –ö–Ω–æ–ø–∫–∏
            buttons = QHBoxLayout()
            save_btn = QPushButton("–°–æ–∑–¥–∞—Ç—å")
            cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
            
            save_btn.clicked.connect(dialog.accept)
            cancel_btn.clicked.connect(dialog.reject)
            
            buttons.addWidget(save_btn)
            buttons.addWidget(cancel_btn)
            layout.addLayout(buttons)
            
            if dialog.exec_() == QDialog.Accepted:
                new_task = Task(
                    title=title_edit.text(),
                    description=desc_edit.toPlainText(),
                    deadline=deadline_edit.dateTime().toPyDateTime(),
                    priority=priority_edit.value(),
                    user_id=self.parent().func.current_user['user_id'],
                    team_id=team_combo.currentData(),
                    status=False,  # –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—Å–µ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                    notification_time=deadline_edit.dateTime().toPyDateTime(),
                    notified=False,
                    created_at=datetime.now()
                )
                
                if self.parent().func.db.create_task(new_task):
                    self.update_board()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                else:
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
                    
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {str(e)}")

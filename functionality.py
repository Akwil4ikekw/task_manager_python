from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QLabel, QInputDialog, QPushButton, QWidget, QCheckBox, QLineEdit, QHBoxLayout, QMessageBox, QCalendarWidget, QListWidget, QFileDialog, QListWidgetItem, QTabWidget, 
                             QTextEdit)
from PyQt5.QtCore import QDate, Qt
from PyQt5.QtGui import QIcon, QPixmap
import os
from database import Database
from Task import Task
# from Project import Project
# from task_history import TaskHistory
# from Team import Team
from datetime import datetime
import re  # –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from Team import Team
import shutil

# from UserTeam import UserTeam



class Functionality:
    def __init__(self, window):
        self.window = window
        self.db = Database()
        self.current_user = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.current_team = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã
        
    def set_current_team(self, team_id: int, team_name: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É"""
        self.current_team = {'id': team_id, 'name': team_name}
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        self.window.update_select_team_button()

    def get_current_team(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É"""
        return self.current_team

    def get_current_user(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.current_user
        
    def is_authenticated(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return self.current_user is not None

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.current_user = None
        self.current_team = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
        self.window.update_select_team_button()
        
    def click_input_button(self):
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–°–æ–æ–±—â–µ–Ω–∏–µ")
        layout = QVBoxLayout()
        label = QLabel("–ö–Ω–æ–ø–∫–∞ –í—Ö–æ–¥—è—â–∏–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞.")
        layout.addWidget(label)
        dlg.setLayout(layout)
        dlg.exec()
        
    def click_teams_button(self):
        if not self.is_authenticated():
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            return
        
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã")
        dlg.resize(400, 500)
        
        layout = QVBoxLayout()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        teams = self.db.get_user_teams(self.current_user['user_id'])
        
        if teams:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
            teams_list = QListWidget()
            for team in teams:
                team_id, name, description, role = team
                item = QListWidgetItem(f"{name} ({role})")
                item.setData(Qt.UserRole, team_id)
                item.setData(Qt.UserRole + 1, name)
                teams_list.addItem(item)
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            teams_list.itemClicked.connect(
                lambda item: self.on_team_selected(
                    item.data(Qt.UserRole),  # team_id
                    item.data(Qt.UserRole + 1)  # team_name
                )
            )
            layout.addWidget(teams_list)
        else:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            no_teams_label = QLabel("–ü–æ–∫–∞ –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –∫–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö")
            no_teams_label.setStyleSheet("""
                QLabel {
                    color: #666;
                    padding: 20px;
                    font-size: 14px;
                }
            """)
            no_teams_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(no_teams_label)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        create_team_btn = QPushButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
        create_team_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                margin-top: 10px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        create_team_btn.clicked.connect(lambda: self.create_team_dialog())
        layout.addWidget(create_team_btn)
        
        dlg.setLayout(layout)
        dlg.exec_()

    def click_calendar_button(self):
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–°–æ–æ–±—â–µ–Ω–∏–µ")
        layout = QVBoxLayout()
        label = QLabel("–ö–Ω–æ–ø–∫–∞ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞.")
        layout.addWidget(label)
        dlg.setLayout(layout)
        dlg.exec()

    def click_backlog_button(self):
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–°–æ–æ–±—â–µ–Ω–∏–µ")
        layout = QVBoxLayout()
        label = QLabel("–ö–Ω–æ–ø–∫–∞ –ë—ç–∫–ª–æ–≥ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞.")
        layout.addWidget(label)
        dlg.setLayout(layout)
        dlg.exec()

    def clicked_create_task(self):
        if not self.is_authenticated():
            QMessageBox.warning(self.window, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            return
            
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        dlg.resize(500, 400)
        
        layout = QVBoxLayout()
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_name = QLineEdit()
        task_name.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = QLineEdit()
        description.setPlaceholderText("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        description.setFixedHeight(100)
        
        # –î–µ–¥–ª–∞–π–Ω —Å –≤—Ä–µ–º–µ–Ω–µ–º
        deadline_layout = QHBoxLayout()
        deadline_label = QLabel("–î–µ–¥–ª–∞–π–Ω:")
        
        # –ü–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã
        deadline_date = QLineEdit()
        deadline_date.setReadOnly(True)
        deadline_date.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
        deadline_date.setFixedWidth(100)
        
        # –ü–æ–ª–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        from PyQt5.QtWidgets import QTimeEdit
        from PyQt5.QtCore import QTime
        deadline_time = QTimeEdit()
        deadline_time.setTime(QTime.currentTime())  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        deadline_time.setDisplayFormat("HH:mm")
        deadline_time.setFixedWidth(70)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_button = QPushButton()
        icon_path = os.path.join('icons', 'icons8-calendar-32.png')
        if os.path.exists(icon_path):
            calendar_button.setIcon(QIcon(icon_path))
        else:
            calendar_button.setText("üìÖ")
        calendar_button.setFixedSize(32, 32)
        
        deadline_layout.addWidget(deadline_label)
        deadline_layout.addWidget(deadline_date)
        deadline_layout.addWidget(deadline_time)
        deadline_layout.addWidget(calendar_button)
        deadline_layout.addStretch()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_layout = QHBoxLayout()
        notification_label = QLabel("–£–≤–µ–¥–æ–º–∏—Ç—å –∑–∞:")
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        from PyQt5.QtWidgets import QComboBox
        notification_preset = QComboBox()
        notification_preset.addItems(["–í –º–æ–º–µ–Ω—Ç –¥–µ–¥–ª–∞–π–Ω–∞", "5 –º–∏–Ω—É—Ç", "10 –º–∏–Ω—É—Ç", "15 –º–∏–Ω—É—Ç", "30 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "–î—Ä—É–≥–æ–µ..."])
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω—É—Ç
        notification_custom = QLineEdit()
        notification_custom.setPlaceholderText("–º–∏–Ω—É—Ç")
        notification_custom.setFixedWidth(60)
        notification_custom.hide()  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ
        
        def on_preset_changed(text):
            if text == "–î—Ä—É–≥–æ–µ...":
                notification_custom.show()
            else:
                notification_custom.hide()
            
        notification_preset.currentTextChanged.connect(on_preset_changed)
        
        notification_layout.addWidget(notification_label)
        notification_layout.addWidget(notification_preset)
        notification_layout.addWidget(notification_custom)
        notification_layout.addStretch()
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        calendar = QCalendarWidget()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è
        calendar.setMinimumDate(QDate.currentDate())
        calendar.hide()
        
        def toggle_calendar():
            if calendar.isHidden():
                # –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—É—é
                if not deadline_date.text():
                    calendar.setSelectedDate(QDate.currentDate())
                calendar.show()
            else:
                calendar.hide()
            
        def select_date():
            selected_date = calendar.selectedDate()
            if selected_date >= QDate.currentDate():
                deadline_date.setText(selected_date.toString("dd.MM.yyyy"))
                calendar.hide()
            else:
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É")
        
        calendar_button.clicked.connect(toggle_calendar)
        calendar.clicked.connect(select_date)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        
        create_button = QPushButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
        create_button.setFixedSize(100, 30)
        
        def on_create_button_clicked():
            if not task_name.text():
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
                return
                
            if not deadline_date.text():
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞")
                return
                
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ timestamp
                deadline_str = f"{deadline_date.text()} {deadline_time.time().toString('HH:mm')}"
                deadline_dt = datetime.strptime(deadline_str, "%d.%m.%Y %H:%M")
                deadline_timestamp = deadline_dt.timestamp()
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notification_timestamp = deadline_timestamp  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–Ω–æ –¥–µ–¥–ª–∞–π–Ω—É
                
                if notification_preset.currentText() != "–í –º–æ–º–µ–Ω—Ç –¥–µ–¥–ª–∞–π–Ω–∞":
                    if notification_preset.currentText() == "–î—Ä—É–≥–æ–µ...":
                        try:
                            minutes = int(notification_custom.text())
                            if minutes <= 0:
                                raise ValueError()
                        except ValueError:
                            QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç")
                            return
                    else:
                        text = notification_preset.currentText()
                        if "—á–∞—Å" in text:
                            minutes = 60
                        else:
                            minutes = int(text.split()[0])
                    
                    from datetime import timedelta
                    notification_dt = deadline_dt - timedelta(minutes=minutes)
                    notification_timestamp = notification_dt.timestamp()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                task = Task(
                    name=task_name.text(),
                    description=description.text(),
                    user_id=self.current_user['user_id'],
                    status=False,
                    deadline=deadline_timestamp,
                    start=datetime.now().timestamp(),
                    end=None,
                    team_id=None,
                    project_id=None,
                    task_id=None,
                    priority=1,
                    notification_time=notification_timestamp,
                    notified=False
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                task_id = self.db.add_task(task)
                if task_id:
                    notification_str = (
                        "–≤ –º–æ–º–µ–Ω—Ç –¥–µ–¥–ª–∞–π–Ω–∞" if notification_timestamp == deadline_timestamp 
                        else datetime.fromtimestamp(notification_timestamp).strftime("%d.%m.%Y %H:%M")
                    )
                    QMessageBox.information(dlg, "–£—Å–ø–µ—Ö", 
                        f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç {notification_str}")
                    dlg.accept()
                else:
                    QMessageBox.critical(dlg, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                QMessageBox.critical(dlg, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
        
        create_button.clicked.connect(on_create_button_clicked)
        button_layout.addWidget(create_button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ layout
        layout.addWidget(task_name)
        layout.addWidget(description)
        layout.addLayout(deadline_layout)
        layout.addWidget(calendar)
        layout.addLayout(notification_layout)
        layout.addStretch()
        layout.addLayout(button_layout)
        
        dlg.setLayout(layout)
        dlg.exec()
        
    def validate_email(self, email: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return bool(re.match(pattern, email))
        
    def show_login_window(self):
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        dlg.resize(400, 200)
        
        layout = QVBoxLayout()
        
        email = QLineEdit()
        email.setPlaceholderText("Email")
        
        password = QLineEdit()
        password.setPlaceholderText("–ü–∞—Ä–æ–ª—å")
        password.setEchoMode(QLineEdit.Password)
        
        button_layout = QHBoxLayout()
        
        login_button = QPushButton("–í–æ–π—Ç–∏")
        register_button = QPushButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        
        def try_login():
            if not all([email.text(), password.text()]):
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return

            if not self.validate_email(email.text()):
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
                return

            try:
                user_data = self.db.login_user(email.text(), password.text())
                if user_data:
                    self.current_user = {
                        'user_id': user_data[0],
                        'username': user_data[1],
                        'email': user_data[2],
                        'created_at': user_data[3]
                    }
                    self.window.update_user_panel()
                    dlg.accept()
                else:
                    QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            except Exception as e:
                QMessageBox.critical(dlg, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}")
        
        def open_registration():
            dlg.close()
            self.show_registration_window()
        
        login_button.clicked.connect(try_login)
        register_button.clicked.connect(open_registration)
        
        button_layout.addWidget(login_button)
        button_layout.addWidget(register_button)
        
        layout.addWidget(email)
        layout.addWidget(password)
        layout.addLayout(button_layout)
        
        dlg.setLayout(layout)
        return dlg.exec()
        
    def show_registration_window(self):
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        dlg.resize(400, 200)
        
        layout = QVBoxLayout()
        
        username = QLineEdit()
        username.setPlaceholderText("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        email = QLineEdit()
        email.setPlaceholderText("Email")
        
        password = QLineEdit()
        password.setPlaceholderText("–ü–∞—Ä–æ–ª—å")
        password.setEchoMode(QLineEdit.Password)
        
        confirm_password = QLineEdit()
        confirm_password.setPlaceholderText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        confirm_password.setEchoMode(QLineEdit.Password)
        
        register_button = QPushButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        
        def try_register():
            if not all([username.text(), email.text(), password.text()]):
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return

            if not self.validate_email(email.text()):
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
                return

            if password.text() != confirm_password.text():
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return
                
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ email
                if self.db.check_email_exists(email.text()):
                    QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                    return
                    
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = self.db.register_user(
                    username.text(),
                    email.text(),
                    password.text()
                )
                
                if user_data:
                    self.current_user = {
                        'user_id': user_data[0],
                        'username': user_data[1],
                        'email': user_data[2],
                        'created_at': user_data[3]
                    }
                    self.window.update_user_panel()
                    QMessageBox.information(dlg, "–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    dlg.accept()
                
            except Exception as e:
                QMessageBox.critical(dlg, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        
        register_button.clicked.connect(try_register)
        
        layout.addWidget(username)
        layout.addWidget(email)
        layout.addWidget(password)
        layout.addWidget(confirm_password)
        layout.addWidget(register_button)
        
        dlg.setLayout(layout)
        return dlg.exec()
        
    def create_team_dialog(self):
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
        dlg.resize(400, 300)
        
        layout = QVBoxLayout()
        
        # –ü–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        name_label = QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        layout.addWidget(name_label)
        
        name_edit = QLineEdit()
        name_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
        layout.addWidget(name_edit)
        
        # –í—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏
        icon_label = QLabel("–ò–∫–æ–Ω–∫–∞ –∫–æ–º–∞–Ω–¥—ã:")
        layout.addWidget(icon_label)
        
        icon_preview = QLabel()
        icon_preview.setFixedSize(64, 64)
        icon_preview.setStyleSheet("border: 1px solid #ccc;")
        layout.addWidget(icon_preview)
        
        icon_path = [""]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∏–∫–æ–Ω–∫–µ
        
        def select_icon():
            file_name, _ = QFileDialog.getOpenFileName(
                dlg,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É",
                "",
                "Images (*.png *.jpg *.jpeg *.ico);;All Files (*)"
            )
            if file_name:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∫–æ–Ω–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                icons_dir = os.path.join(os.path.dirname(__file__), 'team_icons')
                os.makedirs(icons_dir, exist_ok=True)
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∫–æ–Ω–æ–∫
                icon_filename = f"team_icon_{datetime.now().strftime('%Y%m%d_%H%M%S')}{os.path.splitext(file_name)[1]}"
                icon_path[0] = os.path.join(icons_dir, icon_filename)
                shutil.copy2(file_name, icon_path[0])
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                pixmap = QPixmap(file_name)
                icon_preview.setPixmap(pixmap.scaled(64, 64, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        
        select_icon_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å –∏–∫–æ–Ω–∫—É")
        select_icon_btn.clicked.connect(select_icon)
        layout.addWidget(select_icon_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        create_btn = QPushButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
        create_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                margin-top: 10px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        
        def try_create_team():
            if not name_edit.text():
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
                return
            
            if not icon_path[0]:
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∫–æ–Ω–∫—É –∫–æ–º–∞–Ω–¥—ã")
                return
            
            try:
                team_id = self.db.create_team(name_edit.text(), icon_path[0])
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
                self.db.add_team_member(team_id, self.current_user['user_id'], 'admin')
                QMessageBox.information(dlg, "–£—Å–ø–µ—Ö", "–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                dlg.accept()
            except Exception as e:
                QMessageBox.critical(dlg, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        
        create_btn.clicked.connect(try_create_team)
        layout.addWidget(create_btn)
        
        dlg.setLayout(layout)
        return dlg.exec()

    def on_team_selected(self, team_id: int, team_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã"""
        dlg = QDialog(self.window)
        dlg.setWindowTitle(f"–ö–æ–º–∞–Ω–¥–∞: {team_name}")
        dlg.resize(600, 400)
        
        layout = QVBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
        select_team_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
        select_team_btn.setStyleSheet(self.window.style_button())
        select_team_btn.clicked.connect(lambda: self.set_current_team(team_id, team_name))
        layout.addWidget(select_team_btn)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects_tab = QWidget()
        projects_layout = QVBoxLayout()
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects = self.db.get_team_projects(team_id)
        if projects:
            projects_list = QListWidget()
            for project in projects:
                project_id, name, description, created_at = project
                item_text = f"{name}"
                if description:
                    item_text += f"\n{description}"
                projects_list.addItem(item_text)
            projects_layout.addWidget(projects_list)
        else:
            no_projects_label = QLabel("–í –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤")
            no_projects_label.setAlignment(Qt.AlignCenter)
            projects_layout.addWidget(no_projects_label)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        create_project_btn = QPushButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
        create_project_btn.setStyleSheet(self.window.style_button())
        create_project_btn.clicked.connect(lambda: self.show_create_project_dialog(team_id))
        projects_layout.addWidget(create_project_btn)
        
        projects_tab.setLayout(projects_layout)
        tabs.addTab(projects_tab, "–ü—Ä–æ–µ–∫—Ç—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members_tab = QWidget()
        members_layout = QVBoxLayout()
        
        members = self.db.get_team_members(team_id)
        members_list = QListWidget()
        for member in members:
            user_id, username, role = member
            members_list.addItem(f"{username} ({role})")
        members_layout.addWidget(members_list)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        invite_btn = QPushButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        invite_btn.setStyleSheet(self.window.style_button())
        invite_btn.clicked.connect(lambda: self.show_invite_dialog(team_id))
        members_layout.addWidget(invite_btn)
        
        members_tab.setLayout(members_layout)
        tabs.addTab(members_tab, "–£—á–∞—Å—Ç–Ω–∏–∫–∏")
        
        layout.addWidget(tabs)
        dlg.setLayout(layout)
        dlg.exec_()

    def show_create_project_dialog(self, team_id: int):
        """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
        layout = QVBoxLayout()
        
        name_edit = QLineEdit()
        name_edit.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
        layout.addWidget(name_edit)
        
        desc_edit = QTextEdit()
        desc_edit.setPlaceholderText("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
        layout.addWidget(desc_edit)
        
        create_btn = QPushButton("–°–æ–∑–¥–∞—Ç—å")
        create_btn.setStyleSheet(self.window.style_button())
        
        def try_create_project():
            if not name_edit.text():
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
                return
            
            try:
                self.db.create_project(name_edit.text(), desc_edit.toPlainText(), team_id)
                QMessageBox.information(dlg, "–£—Å–ø–µ—Ö", "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                dlg.accept()
            except Exception as e:
                QMessageBox.critical(dlg, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
        
        create_btn.clicked.connect(try_create_project)
        layout.addWidget(create_btn)
        
        dlg.setLayout(layout)
        dlg.exec_()

    def show_invite_dialog(self, team_id: int):
        """–î–∏–∞–ª–æ–≥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        dlg = QDialog(self.window)
        dlg.setWindowTitle("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        layout = QVBoxLayout()
        
        email_edit = QLineEdit()
        email_edit.setPlaceholderText("Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        layout.addWidget(email_edit)
        
        invite_btn = QPushButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å")
        invite_btn.setStyleSheet(self.window.style_button())
        
        def try_invite_user():
            if not email_edit.text():
                QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            try:
                user_data = self.db.get_user_by_email(email_edit.text(), team_id)
                if user_data:
                    self.db.add_team_member(team_id, user_data[0])
                    QMessageBox.information(dlg, "–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É!")
                    dlg.accept()
                else:
                    QMessageBox.warning(dlg, "–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                QMessageBox.critical(dlg, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        
        invite_btn.clicked.connect(try_invite_user)
        layout.addWidget(invite_btn)
        
        dlg.setLayout(layout)
        dlg.exec_()



#TODO: 1. –°–¥–µ–ª–∞—Ç—å –∞—Ç–≤–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –µ–≥–æ –ª–∏—Ü–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Å–æ–∑–±–∞–Ω–∏–∏ –ø—Ä–æ–µ—Ç–∫–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á)        
#TODO  2. –°–¥–µ–ª–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫, –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∑–∞–ø–∏—Å—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é SelectBox, –î–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞, –Ω–∞–ø–æ–º–∏–Ω–∏–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –∫–∞–∫ –∑–∞–¥–∞—á–∞ —Å–µ–π—á–∞—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å)
#TODO  3. —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –≤–æ–∑–æ–º–∂–Ω–æ –ø–æ –Ω–∏–º –Ω–∞–∂–∏–º–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤ –±—ã–ª–æ –≤ –ø—Ä–æ—à–ª–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
#TODO  4. –°–¥–µ–ª–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–¥–µ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–∞–ø–∏—Å–∞–Ω–æ –∫—Ç–æ –≤–Ω–µ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è.

#–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∑–∞–ø–∏—Å—å—é –≤ –±–¥ SadSmile